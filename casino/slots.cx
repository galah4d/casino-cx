package slots

import "gl" //FIXME all needed?
import "glfw"
import "os"

var SCREEN_WIDTH i32 = 1920
var SCREEN_HEIGHT i32 = 1000

/***************************************
 * Declaration of structs.
***************************************/

type Slot struct {
  id i32            // Indetifies the type of slot
  x f32             // Verical position
  y f32             // Horizontal position
  width i32         // The slot's width
  height i32        // The slot's height
}

type Row struct {
  id i32            // Position of the row in the slot machine
  base i32 // FIXME because fuck logic
  spinning bool      // Indicates if the row is spinning
  timer f64         // Spin timer
  timer_limit f64   // How long should the row spin for
  slots [9]Slot     // The slots in the row
}

type SlotMachine struct {
  name str          // Name of the slot machine
  spinning bool     // Indicates if there is any row spinning
  rows [3]Row
  bet_amount f32
  results [3]bool
  texture i32       // Holds the slot machine texture
  textures [9]i32   // Holds textures for the slots //FIXME should slots hold their own textures? Any benefit on this?
}


/***************************************
 * Declaration of constructor functions.
***************************************/

/* Function     : newSlot
   Input        : Identifier for the type of slot (_id i32)
                : Original horizontal position (_x f32)
                : Original vertical position (_y f32)
   Output       : A slot (slot Slot)
   Desctription : Constructor for the Slot struct.
*/
func newSlot(_id i32, _x f32, _y f32) (slot Slot) {
  slot := Slot{
    id: _id,
    x: _x,
    y: _y,
    width: 150,     // FIXME add as global var in constants.cx
    height: 108}    // FIXME add as global var in constants.cx
}

/* Function     : newRow
   Input        : Identifier for the row's position in the slot machine (_id i32)
   Output       : A slot machine's row (row Row)
   Desctription : Constructor for the  Row struct.
*/
func newRow(_id i32) (row Row){
  var _slots [9]Slot

  /*
  Initialize the row's slot calculating their positions based on the
  row's id. The type of each slot is randomly initialized from within a valid
  range (0-9) currently.
  */
  var x f32
  var y f32
  for i:=0; i<9; i++ {                                            // FIXME This spaghetti doesn't please me
    x = f32.add(-0.38, f32.mul(0.38, i32.f32(i32.sub(_id, 1)))) // FIXME add as global var in constants.cx
    y = f32.sub(1.4, f32.mul(i32.f32(i), 0.35))                   // FIXME add as global var in constants.cx
    _slots[i] = newSlot(i32.rand(0,9), x, y)
  }

  // Row initialization.
  row := Row{
    id: _id,
    base: 0,
    spinning: false,
    slots: _slots}
}

/* Function     : newSlotMachine
   Input        : The slot machine's name used to identify what textures
                  to load. (_id i32)
   Output       : A slot machine (slot_machine SlotMachine)
   Desctription : Constructor for the SlotMachine struct.
*/
func newSlotMachine(_name str) (slot_machine SlotMachine) {

  var _texture i32
  // Loads the slot machine's texture.
  _texture = loadSlotMachineTexture(_name)


  var _textures [9]i32
  // Loads the textures for the slots.
  _textures = loadSlotTextures(_name)

  var _rows [3]Row
  for i:=0; i<3; i++ {
    _rows[i] = newRow(i32.add(i, 1)) // FIXME remoce i32.add()
  }

  // Slot Machine initialization.
  slot_machine := SlotMachine{
    name: _name,
    spinning: false,
    rows: _rows,
    bet_amount: 0.0,
    texture: _texture,
    textures: _textures}
}


/*******************************************
 * Declaration of texture loading functions.
*******************************************/

/* Function     : loadSlotMachineTexture
   Input        : The slot machine's name used to identify what textures
                  to load. (_id i32)
   Output       : The slot machine's texture (texture i32)
   Desctription : Loads the slot machine's texture.
*/
func loadSlotMachineTexture(name str) (texture i32) {
  var wd str
	wd = os.GetWorkingDirectory()

  // More styles to be added in future versions
  if name == "SKYCOIN" {
      texture := gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/slot-machine.png"))
  }
}

/* Function     : loadSlotTextures
   Input        : The slot machine's name used to identify what textures
                  to load. (_id i32)
   Output       : An array containing the textures for the slots (textures [9]i32)
   Desctription : Loads the textures for the slot machine's slots.
*/
func loadSlotTextures(name str) (textures [9]i32) {
  var wd str
	wd = os.GetWorkingDirectory()

  var textures [9]i32
  // More styles to be added in future versions
  if name == "SKYCOIN" {
    textures[0] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/skycoin.png"))
    textures[1] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/obelisk.png"))
    textures[2] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/coin-hours.png"))
    textures[3] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/cx.png"))
    textures[4] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/fiber.png"))
    textures[5] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/nodes.png"))
    textures[6] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/skyminer.png"))
    textures[7] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/cxo.png"))
    textures[8] = gl.NewTexture(sprintf("%s%s", wd, "textures/slots/skycoin/icons/kittycash.png"))
  }
}


/*******************************************
 * Declaration of functions responsible for
 * managing the game's logic.
*******************************************/

/* Function     : spin
   Input        : The slot machine whose rows should be spinned (slot_machine SlotMachine)
                : Controls if the left row should spin   (_row_1 bool)
                : Controls if the middle row should spin (_row_2 bool)
                : Controls if the right row should spin  (_row_3 bool)
   Output       : A spinning slot machine (slot_machine SlotMachine)
   Desctription : The function responsible for starting the game. // FIXME bad description too lazy...
*/
func spin(slot_machine SlotMachine, spin_row [3]bool, _bet_amount f32) (slot_machine SlotMachine) {
  // Avoids conflicts with timers by checking is the machine is already spinning.
  if bool.not(slot_machine.spinning) {
    var spin_time f64 = 4.0D

    for i:=0; i<3; i++ {
      if bool.eq(spin_row[i], true) {
        slot_machine.rows[i] = spinRow(slot_machine.rows[i], spin_time)
        spin_time = f64.add(spin_time, 2.0D)
      }
    }
    slot_machine.bet_amount = _bet_amount
    slot_machine.results = checkResults(slot_machine)
  }
  slot_machine.spinning = true
}

/* Function     : spinRow
   Input        : The row to spin (row Row)
   Output       : A spinning row (row Row)
   Desctription : Makes a row start spinning and randomly generates the final
                  outcome of the spin.
*/
func spinRow(row Row, spin_time f64) (row Row) {
  row.base = i32.rand(0, 9)      // The outcome of the spin.
  row.spinning = true
  row.timer_limit = spin_time
  row.timer = glfw.GetTime()    // Starts the row spin timer.
}

func checkResults(slot_machine SlotMachine) (results [3]bool) {
  //FIXME user for loop instead
  var results [3]bool
  results[0] = checkLineResults(3, slot_machine)
  results[1] = checkLineResults(4, slot_machine)
  results[2] = checkLineResults(5, slot_machine)
}

func checkLineResults(line i32, slot_machine SlotMachine) (won bool) {
  var rows [3]Row
  rows = slot_machine.rows

  var slot1 Slot
  slot1 = getSlot(rows[0], line)

  var slot2 Slot
  slot2 = getSlot(rows[1], line)

  var slot3 Slot
  slot3 = getSlot(rows[2], line)

  if (slot1.id == slot2.id) && (slot2.id == slot3.id) {
    won := true
  } else {
    won := false
  }
}

func getSlot(row Row, line i32) (slot Slot) {
  var slots [9]Slot
  slots = row.slots

  var slot Slot
  if i32.lt(i32.add(row.base, line), 9) {
    slot = slots[i32.add(row.base, line)]
  } else {
    slot = slots[i32.sub(i32.add(row.base, line), 9)]
  }
}

/* Function     : update
   Input        : The slot machine to update (slot_machine SlotMachine)
   Output       : An updated slot machine (slot_machine SlotMachine)
   Desctription : Updates the state of the input slot machine by stoping
                  spinning rows if their timers are over or by moving the
                  corresponding slots if they are not.
*/
func update(slot_machine SlotMachine) (slot_machine SlotMachine, won_amount f32) {
  var multplier f32 = 0.0
  if slot_machine.spinning {
    if bool.not(shouldSpin(slot_machine)) {
      slot_machine.spinning = false

      var results [3]bool
      results = slot_machine.results
      for i:=0; i<3; i++ {
        if results[i] {
          multplier = f32.add(multplier, 2.0)
        }
      }
    } else {
      var rows [3]Row
      rows = slot_machine.rows
      rows[0] = spinRowAnimation(rows[0], "DOWN")
      rows[1] = spinRowAnimation(rows[1], "DOWN")
      rows[2] = spinRowAnimation(rows[2], "DOWN")
      slot_machine.rows = rows
    }
  }
  won_amount = f32.mul(multplier, slot_machine.bet_amount)
}

func shouldSpin(slot_machine SlotMachine) (should_spin bool) {
  var should_spin bool = false
  for i:=0; i<3; i++ {
    if slot_machine.rows[i].spinning {
      should_spin = true
    }
  }
}

/*********************************************
 * Declaration of animation related functions.
*********************************************/
// FIXME addd comments
func spinRowAnimation(row Row, direction str) (row Row) {
  if bool.eq(row.spinning, true) {
    for i:=0; i<9; i++ {
      if direction == "UP" {
        row.slots[i] = spinUpAnimation(row.slots[i])
      }
      if direction == "DOWN" {
        row.slots[i] = spinDownAnimation(row.slots[i])
      }
    }
  }

  if gteq(f64.sub(glfw.GetTime(), row.timer), row.timer_limit) {
    if f32.eq(row.slots[row.base].y, 1.4) {
      row.spinning = false
    }
  }
}

func spinUpAnimation(slot Slot) (slot Slot) {
  slot.y = f32.add(slot.y, 0.025)
  if slot.y >= 1.95 {
    slot.y = -1.2
  }
}

func spinDownAnimation(slot Slot) (slot Slot) {
  slot.y = f32.sub(slot.y, 0.025)
  if slot.y <= -1.74 {
    slot.y = 1.4
  }
}


/*************************************
 * Declaration of rendering functions.
**************************************/

/* Function     : render
   Input        : The slot machine to render (row Row)
   Output       : A spinning row (row Row)
   Desctription : Renders a slot machine.
*/
func render(slot_machine SlotMachine) {
  // Renders each row as well as corresponding slots.
  for i:=0; i<3; i++ {
    renderRow(slot_machine.rows[i], slot_machine.textures)
  }

  // Renders the actual slot machine.
  gl.LoadIdentity()
  gl.BindTexture(gl.TEXTURE_2D, slot_machine.texture)
  gl.Scalef(1.0, 1.0, 0.0)
  gl.Begin(gl.QUADS)
  gl.TexCoord2d(0.0D, 0.0D);
  gl.Vertex3f(-1.0, 1.0, 0.0);
  gl.TexCoord2d(1.0D, 0.0D);
  gl.Vertex3f(1.0, 1.0, 0.0);
  gl.TexCoord2d(1.0D, 1.0D);
  gl.Vertex3f(1.0, -1.0, 0.0);
  gl.TexCoord2d(0.0D, 1.0D);
  gl.Vertex3f(-1.0, -1.0, 0.0);
  gl.End();
}

/* Function     : renderRow
   Input        : The row to render (row Row)
                : The textures of the slots contained in the row (textures [9]i32)
   Desctription : Renders a slot machine's row.
*/
func renderRow(row Row, textures [9]i32) () {
  var slots [9]Slot
  slots = row.slots
  /*
  Renders all the slots contained in the row starting by the slot which is
  currently on at the row's base.
  */
  for i:=0; i<9; i++ {
    // Simulates a circuçar buffer to avoid an overflow.
    if i32.lt(i32.add(row.base, i), 9) {
      renderSlot(slots[i32.add(row.base, i)], textures)
    } else {
      renderSlot(slots[i32.sub(i32.add(row.base, i), 9)], textures)
    }

  }
}

/* Function     : renderSlot
   Input        : The slot to render (slot Slot)
                : The textures of the slots contained in the row (textures [9]i32)
   Desctription : Renders a row's slot.
*/
func renderSlot(slot Slot, textures [9]i32) () {
  gl.LoadIdentity()
  gl.BindTexture(gl.TEXTURE_2D, textures[slot.id])

  width := scale(slot.width, SCREEN_WIDTH)
  height := scale(slot.height, SCREEN_HEIGHT)

	gl.Scalef(width, height, 0.0)

  // FIXME need to sleep comment and fix this spaghetti tomorrow
  gl.Translatef(f32.mul(slot.x, scale(SCREEN_WIDTH, slot.width)), f32.mul(slot.y, scale(SCREEN_HEIGHT, slot.height)), 0.0)

	gl.Begin(gl.QUADS)
	gl.TexCoord2d(0.0D, 0.0D);
	gl.Vertex3f(-1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0D, 0.0D);
	gl.Vertex3f(1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0D, 1.0D);
	gl.Vertex3f(1.0, -1.0, 0.0);
	gl.TexCoord2d(0.0D, 1.0D);
	gl.Vertex3f(-1.0, -1.0, 0.0);
	gl.End();
}

func scale(value i32, max i32) (scaled f32) {
	scaled = f32.div(i32.f32(value), i32.f32(max))
}

func main()  {
  glfw.Init()
  glfw.WindowHint(glfw.Resizable, glfw.False)
  glfw.WindowHint(glfw.ContextVersionMajor, 2)
  glfw.WindowHint(glfw.ContextVersionMinor, 1)

  glfw.CreateWindow("window", SCREEN_WIDTH, SCREEN_HEIGHT, "Skycoin Slots")
  glfw.MakeContextCurrent("window")

  gl.Init()
  gl.Enable(gl.BLEND)
  gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

  var program i32
  program = gl.CreateProgram()

  gl.LinkProgram(program)


  var slot_machine SlotMachine
  slot_machine = newSlotMachine("SKYCOIN")

  for bool.not(glfw.ShouldClose("window")) {
    gl.ClearColor(0.0, 0.0, 0.0, 1.0)
		gl.Clear(gl.COLOR_BUFFER_BIT)

		gl.LoadIdentity()
		gl.Enable(gl.TEXTURE_2D)
		gl.Translatef(0.0, 0.0, 0.0)

    render(slot_machine)

    glfw.PollEvents()
		glfw.SwapBuffers("window")
  }
}
