package main

/***************************************
 * Import CX modules.
***************************************/

import "gl"
import "glfw"
import "gltext"
import "os"


/***************************************
 * Import custom modules.
***************************************/

import "graphical"
import "slots"


/***************************************
 * Declaration of the Player struct.
***************************************/

type Player struct {
	username str
	address str
	balance f32
	pending_balance f32
}

func newPlayer(_username str, _address str) (player Player) {
	player := Player{
		username: _username,
		address: _address,
		balance: 1502.6,
		pending_balance: 0.0}
}

func deposit(player Player, amount f32) (player Player) {
	player.balance = f32.add(player.balance, amount)
}

func withdraw(player Player, amount f32) (player Player) {
	if f32.gteq(player.balance, amount) {
		player.balance = f32.sub(player.balance, amount)
	}
	return player
}

func confirmTransaction(player Player) (player Player) {
	player.balance = f32.add(player.balance, player.pending_balance)
}

var SCREEN_WIDTH i32 = 1920
var SCREEN_HEIGHT i32 = 1000

var EXIT_FLAG bool = false
var current_screen graphical.Screen

var player Player
var slot_machine slots.SlotMachine

func initOpenGL () (program i32) {
	gl.Init()
	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

	var program i32
	program = gl.CreateProgram()

	gl.LinkProgram(program)
}

func initGlfw (window str) () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)

	glfw.CreateWindow("window", SCREEN_WIDTH, SCREEN_HEIGHT, "Skycoin Slots")
	glfw.MakeContextCurrent("window")
}

func keyboardManagerMainScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		if button_type == "PLAY" {
			setScreen("SELECTION SCREEN")
		}
		if button_type == "ACCOUNT" {
			setScreen("ACCOUNT SCREEN")
		}
		if button_type == "EXIT" {
			str.print("EXIT")
			EXIT_FLAG = true
		}
	}
}

func keyboardManagerAccountScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		if button_type == "DEPOSIT" {
			setScreen("DEPOSIT SCREEN")
		}
		if button_type == "WITHDRAW" {
			setScreen("WITHDRAW SCREEN")
		}
		if button_type == "RETURN" {
			setScreen("MAIN SCREEN")
		}
	}
}

func keyboardManagerDepositScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		if button_type == "RETURN" {
			setScreen("ACCOUNT SCREEN")
		}
	}
}

func keyboardManagerWithdrawScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		if button_type == "RETURN" {
			setScreen("ACCOUNT SCREEN")
		}
	}
}

func keyboardManagerSelectionScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		if button_type == "SLOTS-SELECTION" {
			setScreen("SLOTS SCREEN")
		}
		if button_type == "RETURN" {
			setScreen("MAIN SCREEN")
		}
	}
}

func keyboardManagerSlotsScreen(window str, key i32, scancode i32, action i32, mods i32) {
	var button_type str
	var bet_amount f32
	var spin_row [3]bool
	var textbox graphical.Textbox
	var textboxes[20] graphical.Textbox

	// Enter
	if bool.and(i32.eq(key, 257), i32.eq(action, 1)) {
		button_type = graphical.getActiveButton(current_screen)
		bet_amount = str.f32(graphical.getTextboxText("BET-AMOUNT", current_screen))

		if button_type == "SPIN-ALL-ROWS" {
			spin_row = [3]bool{true, true, true}
			spinSlotMachine(spin_row)
		}
		if button_type == "SPIN-ROW-1" {
			spin_row = [3]bool{true, false, false}
			spinSlotMachine(spin_row)
		}
		if button_type == "SPIN-ROW-2" {
			spin_row = [3]bool{false, true, false}
			spinSlotMachine(spin_row)
		}
		if button_type == "SPIN-ROW-3" {
			spin_row = [3]bool{false, false, true}
			spinSlotMachine(spin_row)
		}

		if button_type == "MINUS" {
			if f32.gt(bet_amount, 1.0) {
				bet_amount = f32.sub(bet_amount, 1.0)
			}
			current_screen = graphical.setTextboxText("BET-AMOUNT", f32.str(bet_amount), current_screen)
		}
		if button_type == "PLUS" {
			if f32.lt(bet_amount, 99.0) {
				bet_amount = f32.add(bet_amount, 1.0)
			}
			current_screen = graphical.setTextboxText("BET-AMOUNT", f32.str(bet_amount), current_screen)
		}

		if button_type == "RETURN" {
			setScreen("SELECTION SCREEN")
		}
	}
}

func spinSlotMachine(rows_to_spin [3]bool) () {
	var bet_amount f32
	bet_amount = str.f32(graphical.getTextboxText("BET-AMOUNT", current_screen))

	if f32.lteq(bet_amount, player.balance) && bool.not(slot_machine.spinning) {
		player = withdraw(player, bet_amount)
		current_screen = graphical.setTextboxText("BALANCE", sprintf("%s SKY",f32.str(player.balance)), current_screen)
		slot_machine = slots.spin(slot_machine, rows_to_spin, bet_amount)
		//slot_machine = slots.spin(slot_machine, true, true, true, bet_amount)
	}
}

func setScreen(screen str) () {
	var new_screen graphical.Screen
	if str.eq(screen, "MAIN SCREEN") {
		new_screen = graphical.newScreen("MAIN SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = graphical.addButtonToScreen(graphical.newButton("PLAY", 0.0, 0.0, 360, 130, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("ACCOUNT", 0.0, -0.25, 360, 130, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("EXIT", 0.0, -0.5, 360, 130, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerMainScreen")
	}

	if str.eq(screen, "ACCOUNT SCREEN") {
		new_screen = graphical.newScreen("ACCOUNT SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = graphical.addButtonToScreen(graphical.newButton("AVATAR", -0.43, 0.2, 255, 255, false), new_screen)
		new_screen = graphical.addTextboxToScreen(graphical.newTextbox("USERNAME", -0.15, 0.4, player.username, "SkycoinSans36-Light"), new_screen)
		new_screen = graphical.addTextboxToScreen(graphical.newTextbox("WALLET-ADDRESS", -0.15, 0.1, player.address, "SkycoinSans36-Light"), new_screen)
		new_screen = graphical.addTextboxToScreen(graphical.newTextbox("BALANCE", -0.15, -0.2, sprintf("%s SKY",f32.str(player.balance)), "SkycoinSans36-Light"), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("DEPOSIT", -0.2, -0.65, 360, 130, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("WITHDRAW", 0.2, -0.65, 360, 130, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("RETURN", -0.95, -0.925, 50, 50, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerAccountScreen")
	}

	if str.eq(screen, "DEPOSIT SCREEN") {
		new_screen = graphical.newScreen("DEPOSIT SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = graphical.addButtonToScreen(graphical.newButton("COPY-ADDRESS", 0.67, -0.73, 50, 50, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("RETURN", -0.95, -0.925, 50, 50, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerDepositScreen")
	}

	if str.eq(screen, "WITHDRAW SCREEN") {
		new_screen = graphical.newScreen("WITHDRAW SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = graphical.addButtonToScreen(graphical.newButton("RETURN", -0.95, -0.925, 50, 50, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerDepositScreen")
	}

	if str.eq(screen, "SELECTION SCREEN") {
		new_screen = graphical.newScreen("SELECTION SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = graphical.addButtonToScreen(graphical.newButton("SLOTS-SELECTION", -0.43, 0.21, 758, 313, true), new_screen)
		//new_screen = graphical.addButtonToScreen(graphical.newButton("BLACKJACK-SELECTION", 0.5, 0.5, 960, 540, true), new_screen)
		//new_screen = graphical.addButtonToScreen(graphical.newButton("DICES-SELECTION", -0.5, -0.5, 960, 540, true), new_screen)
		//new_screen = graphical.addButtonToScreen(graphical.newButton("ROULETTE-SELECTION", 0.5, -0.5, 960, 540, true), new_screen)

		new_screen = graphical.addButtonToScreen(graphical.newButton("RETURN", -0.95, -0.925, 50, 50, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerSelectionScreen")
	}
	if str.eq(screen, "SLOTS SCREEN") {
		slot_machine = slots.newSlotMachine("SKYCOIN")

		new_screen = graphical.newScreen("SLOTS SCREEN", SCREEN_WIDTH, SCREEN_HEIGHT)

		new_screen = graphical.addTextboxToScreen(graphical.newTextbox("BALANCE", -0.86, -0.8, sprintf("%s SKY", f32.str(player.balance)), "SkycoinSans36-Light"), new_screen)

		new_screen = graphical.addButtonToScreen(graphical.newButton("SPIN-ROW-1", -0.38, -0.8, 300, 100, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("SPIN-ROW-2",  0.0, -0.8, 300, 100, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("SPIN-ROW-3",  0.38, -0.8, 300, 100, false), new_screen)

		new_screen = graphical.addButtonToScreen(graphical.newButton("MINUS", 0.675, -0.7, 50, 50, false), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("PLUS", 0.875, -0.7, 50, 50, false), new_screen)
		new_screen = graphical.addTextboxToScreen(graphical.newTextbox("BET-AMOUNT", 0.760, -0.65, "10", "SkycoinSans36-Light"), new_screen)
		new_screen = graphical.addButtonToScreen(graphical.newButton("SPIN-ALL-ROWS", 0.775, -0.9, 300, 100, true), new_screen)

		new_screen = graphical.addButtonToScreen(graphical.newButton("RETURN", -0.95, -0.925, 50, 50, false), new_screen)

		glfw.SetKeyCallback("window", "keyboardManagerSlotsScreen")
	}
	current_screen = new_screen
}

func main () {

	initGlfw("window")
	var program i32
	program = initOpenGL()

	var wd str
	wd = os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/Skycoin-Sans-otf/skycoin_light.ttf")

  glfw.SetMouseButtonCallback("window", "mouseButton")

	os.Open(fontFile)
	gltext.LoadTrueType("SkycoinSans36-Light", fontFile, 36, 32, 127, gltext.LeftToRight)
  os.Close(fontFile)

	var x f64
  var y f64

	setScreen("MAIN SCREEN")

	player = newPlayer("@taekwondoughlas", "vQxgd4Mq2eReLj3fhigSBGWmfNSMqQMoL3")

	for bool.not(glfw.ShouldClose("window")) && bool.not(EXIT_FLAG) {
		gl.ClearColor(0.0, 0.0, 0.0, 1.0)
		gl.Clear(gl.COLOR_BUFFER_BIT)

		gl.LoadIdentity()
		gl.Enable(gl.TEXTURE_2D)
		gl.Translatef(0.0, 0.0, 0.0)

		if str.eq(current_screen.name, "SLOTS SCREEN") {
			slot_machine, player.pending_balance = slots.update(slot_machine)
			player = confirmTransaction(player)
			current_screen = graphical.setTextboxText("BALANCE", sprintf("%s SKY",f32.str(player.balance)), current_screen)
			slots.render(slot_machine)
		}


		x, y = glfw.GetCursorPos("window")
    current_screen = graphical.updateButtonsState(f64.i32(x), f64.i32(y), current_screen)
		graphical.renderScreen(current_screen)

		glfw.PollEvents()
		glfw.SwapBuffers("window")


		// stop = bool.not(glfw.ShouldClose("window"))
	}
}
